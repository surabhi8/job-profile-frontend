{"version":3,"sources":["Components/Profile/Profile.js","Constants.js","Components/Login/Login.js","Components/Company/Company.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Profile","props","state","username","password","isLogggedIn","companyObject","isCompanyExist","profileObject","this","title","className","name","alt","src","image","to","pathname","aboutProps","companyId","Company","jobRole","React","Component","baseURL","Login","event","apiBaseUrl","payload","userName","axios","post","then","response","status","setState","console","log","data","result","alert","catch","error","hintText","floatingLabelText","onChange","newValue","type","label","primary","onClick","handleClick","loction","location","get","Object","keys","length","logo","address","uniqueUsers","totalViews","defaultProps","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0b5a1dd.chunk.js","sourcesContent":["import React from 'react';\nimport  './Profile.css';\nimport AppBar from 'material-ui/AppBar';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Profile.css';\nclass Profile extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n    username:'',\n    password:'',\n    isLogggedIn:false,\n    companyObject:{},\n    isCompanyExist:false,\n    }\n   }\n  render(){\n    const {profileObject} = this.props;\n    return (\n      <div>\n      <MuiThemeProvider>\n          <AppBar\n             title=\"Profile\"\n           />\n         </MuiThemeProvider>\n         <div className=\"profile-wrapper\">\n         <div className=\"profile-attribute\">{profileObject.name}\n         <span className=\"profile-image\"> <img className=\"company-logo\" alt=\"company\" src={`/Images/${profileObject.image}`}></img></span>\n         </div>\n         Company Name:\n         <Link \n         to={{pathname:'/company-profile',aboutProps: {companyId:profileObject.companyId}}} \n         className=\"nav-link\">{profileObject.Company?profileObject.Company.name:null} </Link>\n          <div className=\"profile-attribute\"> {profileObject.jobRole}</div>\n          </div>\n          </div>\n  );\n  }\n}\n\nexport default Profile;\n\nProfile.propTypes = {\n  profileObject: PropTypes.object\n}","\nconst baseURL = 'https://surabhi8.github.io/job-profile-frontend/';\nexport default baseURL;\n","import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\nimport React from 'react';\nimport axios from 'axios';\nimport Profile from '../Profile/Profile';\nimport baseURL from '../../Constants';\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      isLogggedIn: false,\n      profileObject: {},\n    };\n  }\n  handleClick(event)  {\n    const apiBaseUrl = baseURL;\n    const payload = {\n      userName: this.state.username,\n      password: this.state.password,\n    };\n    axios.post(`${apiBaseUrl}login`, payload,).then((response) => {\n      if (response.status === 200) {\n        const payload = { userName: this.state.username };\n        axios.post(`${apiBaseUrl}profile`, payload).then((response) => {\n          if (response.status === 200) {\n            this.setState({ isLogggedIn: !this.state.isLogggedIn });\n            console.log('in login', response.data.result.Company.name);\n            this.setState({ profileObject: response.data.result });\n          }\n        });\n      } else if (response.status === 204) {\n        console.log('Username password do not match');\n        alert('username password do not match');\n      } else {\n        console.log('Username does not exists');\n        alert('Username does not exist');\n      }\n    })\n      .catch((error) => {\n  console.log(error);\n  });\n  }\n  render() {\n    if(!this.state.isLogggedIn){\n    return (\n      <div>\n        <MuiThemeProvider>\n          <div>\n          <AppBar\n             title=\"Login\"\n           />\n           <TextField\n             hintText=\"Enter your Username\"\n             floatingLabelText=\"Username\"\n             onChange = {(event,newValue) => this.setState({username:newValue})}\n             />\n           <br/>\n             <TextField\n               type=\"password\"\n               hintText=\"Enter your Password\"\n               floatingLabelText=\"Password\"\n               onChange = {(event,newValue) => this.setState({password:newValue})}\n               />\n             <br/>\n             <RaisedButton label=\"Submit\" primary={true} onClick={(event) => this.handleClick(event)}/>\n         </div>\n         </MuiThemeProvider>\n      </div>\n    );\n  } \n    return<Profile profileObject={this.state.profileObject}/>\n    \n}\n}\nexport default Login;\n","import React from 'react';\nimport  './Company.css';\nimport AppBar from 'material-ui/AppBar';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport baseURL from '../../Constants';\nimport './Company.css';\nclass Company extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        companyObject:{}\n    }\n  }\n  componentDidMount(){\n      const apiBaseUrl = baseURL\n      const companyId = this.props.loction?this.props.location.aboutProps.companyId:1;\n      axios.get(apiBaseUrl+`company-profile?companyId=${companyId}`).then((response)=>{\n        if(response.status===200){\n          this.setState({companyObject:response.data.result})\n        }\n      })\n    }\n  render(){\n    const {companyObject} = this.state\n   console.log(companyObject.image);\n    if(Object.keys(this.state.companyObject).length>0) {return (\n      <div>\n      <MuiThemeProvider>\n          <AppBar\n             title=\"Company Details\"\n           />\n         </MuiThemeProvider>\n         <div className=\"company-wrapper\">\n         <div className=\"company-attribute\">\n         {companyObject.name}\n         <span className=\"company-logo\"> <img className=\"company-logo\" alt=\"company\" src={`/Images/${companyObject.logo}`}></img></span>\n         </div>\n       \n          <div className=\"company-attribute\"> {companyObject.address}</div>\n          <div className=\"company-attribute\">Visted Users: {companyObject.uniqueUsers}</div>\n          <div className=\"company-attribute\">TotalViews: {companyObject.totalViews}</div>\n          </div>\n          </div>)}\n          else return null};\n}\nexport default Company;\n\nCompany.propTypes = {\n  location: PropTypes.object,\n}\nCompany.defaultProps =  {\n  location: {\n    aboutProps: { companyId:1 }\n  },\n}\n","import React from 'react';\nimport './App.css';\nimport Login from '../Login/Login';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Company from '../Company/Company';\nimport Profile from '../Profile/Profile';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n          <Switch>\n              <Route exact path='/' component={Login} />\n              <Route path='/company-profile' component={Company} />\n              <Route path='/profile' component={Profile} />\n          </Switch>\n      </Router>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}